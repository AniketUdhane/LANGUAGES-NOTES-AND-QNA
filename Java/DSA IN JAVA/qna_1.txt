1. Why are data structures important for the implementation of algorithms?
They influence the speed at which data can be stored and retrieved.

2. What is required to prove the incorrectness of an algorithm?
one wrong case

3. Why is the following instruction NOT an algorithm?
If you see a bear, run.
Neither the problem nor the solution steps are precisely defined.

4. Which assumption is not required for the RAM model of computation?
presorted data

5. Why is space complexity secondary to time complexity?
RAM is inexpensive.

6. An algorithm exhibits cubic growth of computation time with the size of the input data. If 5 ms are required for 10,000 data elements, about how much time is required for 300,000 data elements?
135 s

7. For the following pseudocode, which type of relationship exists between the required computation time and N?

for I = 0 to N
     for j = 0 to N-1
          for k = 0 to N-2
               Acc = Acc + A(i)*A(j)*A(k)
               
 cubic
 
 8. Which category is most time-prohibitive?
n!

9. What is the time complexity for a search in an unordered array?
O(n)

10. What is the time complexity for a binary search in an ordered array?
O(log2(n))

11. Which sorting algorithm typically has the best performance for small, partially presorted lists?
insertion

12. You start with an array A = 0 7 4' 4 2 5 4'' 1. Which option represents a stable sort?
0 1 2 4' 4 4'' 5 7 

13. Why is an insertion sort a familiar operation?
People who file records or play cards do this operation routinely.

14. What is wrong with the following pseudocode for an insertion sort for an array D of length D.len?

for I = 1 to D.len-1
     tmp = D[i]
     j = i-1
     while j >= 0 && D[j]> tmp
          D[j+1] = D[j]
          j = j+1
     A[j+1]= tmp
     
The index j within the while loop should be decremented rather than incremented.

15. Why do inserting and deleting items in an ordered array have a time complexity of O(n)?
The shifting operations prior to insertion or after deletion require O(n) time.

16. What is wrong with the following pseudocode for a selection sort for an array D of length D.len?

for I = 0 to D.len-2
     minIndex = I
     for j = i+1 to D.len-2
          if (D[j] < D[minIndex])
               minIndex=j
     tmp = D[minIndex]
     D[minIndex] = D[i]
     D[i] = tmp
     
The upper limit on the second for loop should be D.len-1.

16. What is the time complexity of inserting a new element at the head of a linked list?
O(1)

17. What is wrong with the following code for computing the length of a list?

public int length() {
     int length = 0;
     Node current = this.head;
     length++;
     while(current != null) {
          current = current.getNextNode();
     }
}
The length++ operation should be inside the while loop.

18. How does the required search time vary with the length of a linked list?
O(n)

19. What is the purpose of the following code in insertAtTail?

if (this.head == null) {
     this.head == newNode;
}
It inserts a head if the linked list is empty.

19. How do you delete the first node from a linked list using the tools from this course?
public void deleteFromHead() { this.head = this.head.getNextNode(); }

20. Why is the performance of an insertion sort on a doubly linked list typically better than on an indexed array?
Upon a shift, you only need to rearrange nearest neighbors rather than all elements.

21. What are the variable types in a Node for the example Java code provided?
integer and Node

22. What is wrong with the following class declaration for a linked list?

public class LinkedList {
     private Node head;
     private Node nextNode;
}
A linked list should contain only a reference to the head.

23. Why is the time complexity for insertion in a sorted linked list O(n) the worst case?
You must compare the insertion element to all elements in the list.

24. Why is the following code contained in insertAtHead(int data) for a DoublyLinkedList?

if (this.head != null) {
     this.head.setPreviousNode(newNode);
}
to handle the case of insertion into an empty list

25. What composes a node in a linked list?
a data element and reference to the next node

26. What does the PUSH operation do to a stack?
It adds a new element to the top.

27. A circular queue has a maximum length of 12. If Head Index = 5 and Tail Index = 2, how many elements are empty?
2

28. From an empty, double-ended, circular queue of length 9, enqueue 4 elements at the head and 3 at the tail. Dequeue 2 elements from the head and 1 from the tail. What are the head and tail indices?
2 and 5

29. For the implementation shown, what is the value of the top index for an empty stack?
-1

30. What does the ENQUEUEING operation do?
It adds an element to the end of the queue.

31. From an empty, double-ended, circular queue of length 12, you enqueue 7 elements at the head and 3 at the tail. What are the subsequent head and tail indices?
6 and 2

32. In the Tower of Hanoi implementation, which snippet specifies the breaking condition?
if (numberOfDiscs ==1) {

33. How does the time required for a merge sort vary with the size of the starting array?
O(nlog2(n))

34. When do you stop partitioning the arrays to be sorted in a merge sort?
when they are of length 1

35. In the pseudocode implementation of the merge sort, which condition corresponds to breaking the recursion?
start == middle

36. Why does stack overflow occur, even if there is a valid breaking condition?
A large number of recursions may be required to meet the breaking condition.

37. What is the function of the result parameter in the tail-recursion code?

public int factorial (int n, int result) {
     if (n == 0) return result;
     return factorial (n-1, n*result);
}

It is an accumulator that obviates the need for a stack.

38. In gneral, how do iterative methods compare with recursive methods?
Recursive methods are more concise to code, but run slower and require more memory.

39. Where would you insert the value 31 in the following binary search tree?

A binary search tree begins with 52. 52 has children left 33 and right 65. 33 has children left 25 and right 39. 25 has children left 12 and right 27. 39 has children left 34 and right 48. 65 has children left 60 and right 78. 78 has children left 72 and right 90. 72 has left child 70.

as the right child of 27

40. In the following snippet of insert(), what happens if data > this.data and this.rightChild != null?

if (data >= this.data) {
     if (this.rightChild == null)
          this.rightChild = new TreeNode(data);
     else
          this.rightChild.insert(data);
     }

The code calls insert() recursively.

41. In the following tree, which node besides 34 is a valid successor for 33?

A tree is labeled, Case 3, Node to be deleted has 2 children. 52 has children left 33 and right 65. 33 has children left 25 and right 39. 25 has children left 12 and right 27. 39 has children left 34 and right 48. 65 has children left 60 and right 78. 78 has children left 72 and right 90. 72 has left child 70.

27

42. How does find() need to be changed in order to use the concept of a soft delete employing a Boolean variable isDeleted for each node?
by replacing if(this.data === data) with if(this.data == data && !isDeleted)

43. Which part of the following code tests that the node being examined is a leaf?

if (current.getLeftChild() == null &&        current.getRightChild() == null ) {
     if (current == root) {
          root = null;   } else {
          if (isLeftChild)
               parent.setLeftChild(null);
          else
               parent.setRightChild(null);  } }
               
if (current.getLeftChild() == null &&        current.getRightChild() == null )

44. Which action should you take if the node to be deleted has one child?
Make that child an offspring of the parent of the node to be deleted.

45. Why are unbalanced trees undesirable?
Several algorithms require more processing time on unbalanced trees than on balanced trees.

46. A balanced binary tree has about 1,000 nodes. What is the approximate height of the tree in number of layers?
10

47. For the following binary search tree, what is the preorder sequence?

A binary search tree begins with 48. 48 has children left 45 and right 73. 45 has left child 37. 37 has children left 21 and right 39. 73 has children left 50 and right 87. 50 has right child 68. 68 has left child 64. 64 has children left 62 and right 66.

48 45 37 21 39 73 50 68 64 62 66 87

48. For the following binary search tree, what is the postorder sequence?

A binary search tree begins with 48. 48 has children left 45 and right 73. 45 has left child 37. 37 has children left 21 and right 39. 73 has children left 50 and right 87. 50 has right child 68. 68 has left child 64. 64 has children left 62 and right 66.

21 39 37 45 62 66 64 68 50 87 73 48

49. What is the time complexity for searching, insertion, and deletion with a binary search tree?
O(log(n))

50. Why does the following diagram not represent a valid tree data structure?

A tree diagram begins with A. From A are options B, C, and D. From option B is E. From C is F and G, which are also linked together. An arrow points from A to Root.

The link between F and G provides multiple pathways from the root to the nodes.

51. Which statement is true for a binary search tree?
The value in the left child is always less than the parent, and the value in the right child is always greater than the parent.

52. In the following implementation of find() for a binary search tree, why is there no statement containing a conditional operating on data > this.data?

Public TreeNode find(integer data) {
     if (this.data == data)
          return this;
     If (data < this.data && leftChild != null)
          return leftChild.find(data);
     if (rightChild != null)
          return rightChild.find(data);
     return null; }
     
You do not need to directly test this possibility, since it can be deduced from the first two if statements.

53. Which two sorting algorithms is the Bucket sort a hybrid of?
Counting and Radix

54. Given the sequence 4231 5847 3256 8792 2310, what is the outcome of two cycles of a Radix sort, the first acting on the units digit and the second on the tens digit?
2310 4321 5847 3256 8792

55. You have an array of length 1,000 upon which you want to perform a Shell sort. What should be your first interval size or value of h?
364

56. You have written a Shell sort algorithm that requires 1.2 ms for a sequence of length 4,750 on your old machine. About how long would it take for a sequence of length 47,500?
24 ms

57. In the following pseudocode for a Quicksort, what is the breaking condition for the recursion?

Quicksort(A, start, end)
     if end > start
      pivot = Partition(A, start, end)
     Quicksort (A, start, pivot-1)
     Quicksort(A, pivot+1, end)
     
start ==  end

58. What is wrong with the following attempt at pseudocode for the partition step in a Quicksort?

Partition(A ,start, end)
     i = start
     for j = start to end
          if A([j] <= pivot
          exchange A[i] with A[j]
     exchange A[i] with A[end]
return i
The variable pivot is not initiated, the upper limit for the index j is incorrect, and the index i is not incremented.

59. For the counting sort algorithm illustrated schematically in the following figure, how should n and k be related so the sort has a time complexity of O(n)?

A diagram labeled, Counting Sort. A row labeled, Data Array of size n, where values for n are, 3, 10, 2, 4, 2, 6, 9, 5, 7, and 2. A second row is labeled, Temp has 11 boxes, all numbered 0. Under the first box is 0. Under the last box is K.

k<n
***********heap************
60. If you call the root node 0, what is the index for 2 in the array representation of the following heap?

A heap has a root of 28. 28 has 2 children, left 18 and right 13. 18 has children, left 2 and right 15. 

3

61. How can a Heap sort be represented algorithmically?
1. Move the root to the last unfilled array location

2. Move the last heap item to the root

3. Fix the remaining heap

4. Repeat

62. What is the time complexity for deleting the root from a heap?
O(log2(n))

63. If you add the element 17 to the following heap and then fix the heap, where will the element 17 be located?

A heap has a root of 28. 28 has 2 children, left 18 and right 13. 18 has children, left 2 and right 15. 8

as the right child of 28

64. What is the array representation of the heap built from the starting sequence 32 12 15 6 8 21 28?
32 12 28 6 8 15 21

65. How do you resolve collisions by chaining?
by increasing the range of the array index
by making each array element a heap
by making each array element a linked list

66. Why are arrays attractive for large data sets?
Data insertion and retrieval are O(1) operations.

67. What is a Hash table collision?
an instance in which two keys map to the same index

68. Hash clustering is a problem in your application. Which open addressing strategy should prove most useful?
Image: Strategies for open addressing A.png [custom] AltText: ""The modulo m of the sum of one hash function plus i times another hash function

69. How should the array size, m, be related to the number of keys, n, in order to use open addressing?
m>=n

70. If you have a load factor of 0.75, how many probes of the Hash table are required, on average, for accurate addressing?
4

71. You are using the method of division to map keys with a range of 248 to 364 onto an array of length 37. Which keys map to an index of 24?
283, 320, and 357

72. 

